#ifndef ANIMATION_DISPLAY_H
#define ANIMATION_DISPLAY_H
#include "matrix.h
const uint8_t jump_width PROGMEM = 32;
const uint8_t jump_height PROGMEM= 32;
const uint8_t jump_frames PROGMEM= 2;
const uint16_t jump_colors PROGMEM= 20;

const uint16_t jump_colors_palette[LED_NUM][RGB_NUM] PROGMEM = {{25, 104, 173}, {0, 0, 0}, {25, 13, 6}, {10, 6, 3}, {140, 75, 43}, {203, 109, 62}, {205, 160, 133}, {16, 18, 17}, {22, 14, 8}, {1, 1, 1}, {3, 15, 35}, {14, 19, 20}, {210, 210, 210}, {17, 17, 14}, {25, 104, 175}, {13, 7, 4}, {215, 164, 135}, {14, 17, 19}, {3, 15, 38}, {225, 205, 191}};

const uint16_t jump_frame_sizes[MAX_ANIMATION_FRAMES_ACCEPTED] PROGMEM = {226, 191};

const uint16_t jump_animation[MAX_ANIMATION_FRAMES_ACCEPTED][LED_NUM][LED_DATA_SIZE] PROGMEM = {{{0, 0, 74}, {1, 74, 1}, {0, 75, 30}, {1, 105, 1}, {2, 106, 1}, {1, 107, 4}, {0, 111, 2}, {1, 113, 4}, {0, 117, 20}, {1, 137, 1}, {2, 138, 4}, {1, 142, 3}, {2, 145, 3}, {1, 148, 1}, {0, 149, 20}, {1, 169, 2}, {2, 171, 7}, {3, 178, 1}, {1, 179, 2}, {0, 181, 18}, {1, 199, 4}, {2, 203, 1}, {3, 204, 2}, {2, 206, 3}, {3, 209, 2}, {2, 211, 2}, {1, 213, 2}, {0, 215, 15}, {1, 230, 2}, {2, 232, 6}, {3, 238, 1}, {2, 239, 2}, {3, 241, 1}, {2, 242, 5}, {1, 247, 1}, {0, 248, 15}, {1, 263, 2}, {2, 265, 1}, {3, 266, 1}, {2, 267, 9}, {3, 276, 1}, {1, 277, 2}, {0, 279, 15}, {1, 294, 1}, {2, 295, 4}, {3, 299, 1}, {2, 300, 4}, {3, 304, 1}, {2, 305, 1}, {3, 306, 1}, {2, 307, 3}, {3, 310, 1}, {1, 311, 1}, {0, 312, 15}, {1, 327, 1}, {2, 328, 1}, {3, 329, 1}, {2, 330, 2}, {4, 332, 1}, {3, 333, 1}, {2, 334, 1}, {3, 335, 1}, {4, 336, 1}, {2, 337, 1}, {4, 338, 1}, {3, 339, 1}, {2, 340, 3}, {3, 343, 1}, {1, 344, 1}, {0, 345, 13}, {1, 358, 1}, {2, 359, 1}, {1, 360, 2}, {2, 362, 1}, {4, 363, 1}, {5, 364, 2}, {3, 366, 1}, {5, 367, 4}, {4, 371, 1}, {2, 372, 1}, {1, 373, 3}, {0, 376, 13}, {1, 389, 1}, {2, 390, 2}, {1, 392, 1}, {4, 393, 1}, {2, 394, 1}, {5, 395, 2}, {1, 397, 1}, {5, 398, 3}, {1, 401, 1}, {5, 402, 2}, {2, 404, 1}, {4, 405, 1}, {1, 406, 1}, {0, 407, 15}, {1, 422, 3}, {6, 425, 1}, {7, 426, 1}, {5, 427, 2}, {1, 429, 1}, {5, 430, 3}, {1, 433, 1}, {5, 434, 2}, {8, 436, 1}, {6, 437, 1}, {1, 438, 1}, {0, 439, 17}, {1, 456, 2}, {4, 458, 1}, {5, 459, 9}, {4, 468, 1}, {1, 469, 2}, {0, 471, 16}, {1, 487, 2}, {2, 489, 1}, {1, 490, 1}, {4, 491, 1}, {5, 492, 1}, {1, 493, 1}, {5, 494, 3}, {1, 497, 1}, {5, 498, 1}, {4, 499, 1}, {1, 500, 1}, {2, 501, 1}, {1, 502, 2}, {0, 504, 17}, {1, 521, 1}, {2, 522, 1}, {1, 523, 1}, {4, 524, 1}, {5, 525, 1}, {1, 526, 3}, {5, 529, 1}, {4, 530, 1}, {1, 531, 1}, {2, 532, 1}, {1, 533, 1}, {0, 534, 19}, {1, 553, 4}, {4, 557, 1}, {5, 558, 3}, {4, 561, 1}, {1, 562, 3}, {0, 565, 22}, {1, 587, 1}, {9, 588, 1}, {1, 589, 2}, {4, 591, 1}, {1, 592, 2}, {9, 594, 1}, {1, 595, 1}, {0, 596, 22}, {1, 618, 2}, {9, 620, 7}, {1, 627, 2}, {0, 629, 21}, {1, 650, 1}, {9, 651, 9}, {1, 660, 1}, {0, 661, 20}, {1, 681, 1}, {5, 682, 2}, {1, 684, 1}, {9, 685, 5}, {1, 690, 1}, {5, 691, 2}, {1, 693, 1}, {0, 694, 19}, {1, 713, 1}, {5, 714, 2}, {1, 716, 1}, {9, 717, 5}, {1, 722, 1}, {5, 723, 2}, {1, 725, 1}, {0, 726, 19}, {1, 745, 1}, {5, 746, 2}, {1, 748, 1}, {9, 749, 5}, {1, 754, 1}, {5, 755, 2}, {1, 757, 1}, {0, 758, 19}, {1, 777, 1}, {5, 778, 2}, {1, 780, 1}, {10, 781, 5}, {1, 786, 1}, {5, 787, 2}, {1, 789, 1}, {0, 790, 20}, {1, 810, 2}, {10, 812, 2}, {1, 814, 3}, {10, 817, 2}, {1, 819, 2}, {0, 821, 22}, {1, 843, 2}, {10, 845, 2}, {1, 847, 1}, {10, 848, 2}, {1, 850, 2}, {0, 852, 23}, {1, 875, 1}, {11, 876, 2}, {1, 878, 3}, {11, 881, 2}, {1, 883, 1}, {0, 884, 22}, {1, 906, 1}, {12, 907, 1}, {13, 908, 1}, {1, 909, 2}, {0, 911, 1}, {1, 912, 2}, {13, 914, 1}, {12, 915, 1}, {1, 916, 1}, {0, 917, 22}, {1, 939, 3}, {0, 942, 3}, {1, 945, 3}, {0, 948, 76}}, {{14, 0, 10}, {1, 10, 1}, {14, 11, 30}, {1, 41, 1}, {2, 42, 1}, {1, 43, 4}, {14, 47, 2}, {1, 49, 4}, {14, 53, 20}, {1, 73, 1}, {2, 74, 4}, {1, 78, 3}, {2, 81, 3}, {1, 84, 1}, {14, 85, 20}, {1, 106, 1}, {2, 107, 7}, {15, 114, 1}, {14, 117, 18}, {1, 135, 2}, {1, 138, 1}, {15, 140, 2}, {2, 142, 3}, {15, 145, 2}, {2, 148, 1}, {1, 149, 2}, {14, 151, 15}, {1, 166, 2}, {2, 168, 3}, {15, 174, 1}, {15, 177, 1}, {2, 178, 5}, {1, 183, 1}, {14, 184, 15}, {2, 201, 1}, {15, 202, 1}, {2, 204, 2}, {2, 209, 2}, {15, 212, 1}, {14, 215, 15}, {2, 231, 1}, {15, 235, 1}, {2, 238, 1}, {15, 240, 1}, {2, 241, 1}, {15, 242, 1}, {15, 246, 1}, {14, 248, 15}, {2, 264, 1}, {15, 265, 1}, {2, 266, 1}, {4, 268, 1}, {15, 269, 1}, {15, 271, 1}, {4, 272, 1}, {4, 274, 1}, {15, 275, 1}, {2, 276, 3}, {15, 279, 1}, {1, 280, 1}, {14, 281, 13}, {1, 296, 2}, {4, 299, 1}, {5, 300, 2}, {15, 302, 1}, {5, 303, 4}, {4, 307, 1}, {1, 309, 2}, {14, 312, 13}, {1, 325, 1}, {2, 326, 2}, {1, 328, 1}, {4, 329, 1}, {5, 331, 2}, {1, 333, 1}, {5, 334, 3}, {1, 337, 1}, {5, 338, 2}, {4, 341, 1}, {1, 342, 1}, {14, 343, 15}, {1, 359, 1}, {16, 361, 1}, {17, 362, 1}, {5, 363, 1}, {1, 365, 1}, {5, 366, 1}, {1, 369, 1}, {5, 371, 1}, {16, 373, 1}, {14, 375, 17}, {1, 393, 2}, {5, 397, 1}, {5, 401, 1}, {4, 404, 1}, {1, 405, 1}, {14, 407, 16}, {5, 425, 2}, {1, 427, 1}, {1, 430, 3}, {4, 435, 1}, {1, 436, 1}, {5, 437, 2}, {1, 439, 1}, {14, 440, 16}, {5, 457, 2}, {1, 459, 1}, {4, 460, 1}, {1, 462, 3}, {4, 466, 1}, {1, 467, 1}, {5, 468, 3}, {1, 471, 1}, {14, 472, 17}, {1, 489, 1}, {5, 490, 2}, {1, 492, 1}, {4, 493, 1}, {4, 497, 1}, {1, 498, 1}, {9, 499, 1}, {5, 500, 2}, {14, 503, 18}, {5, 522, 1}, {9, 523, 2}, {1, 525, 1}, {4, 527, 1}, {1, 529, 1}, {9, 530, 3}, {14, 534, 20}, {9, 555, 9}, {14, 565, 21}, {1, 586, 1}, {9, 587, 1}, {9, 589, 5}, {9, 595, 1}, {1, 596, 1}, {14, 597, 22}, {14, 628, 23}, {1, 651, 1}, {1, 659, 1}, {14, 660, 23}, {1, 683, 1}, {9, 684, 1}, {9, 690, 1}, {1, 691, 1}, {14, 692, 23}, {1, 715, 1}, {9, 716, 1}, {9, 722, 1}, {1, 723, 1}, {14, 724, 22}, {1, 746, 1}, {18, 747, 9}, {1, 756, 1}, {14, 757, 21}, {1, 778, 1}, {18, 779, 9}, {1, 788, 1}, {14, 789, 19}, {1, 808, 2}, {17, 810, 1}, {18, 811, 3}, {18, 817, 3}, {17, 820, 1}, {1, 821, 2}, {14, 823, 17}, {1, 840, 1}, {19, 841, 1}, {2, 842, 1}, {17, 843, 1}, {1, 845, 1}, {14, 846, 3}, {1, 849, 1}, {17, 851, 1}, {2, 852, 1}, {19, 853, 1}, {1, 854, 1}, {14, 855, 18}, {1, 873, 1}, {2, 874, 2}, {1, 876, 1}, {14, 877, 5}, {1, 882, 1}, {2, 883, 2}, {1, 885, 1}, {14, 886, 20}, {1, 907, 1}, {14, 908, 7}, {1, 915, 1}, {14, 917, 107}}};

void showJump(Adafruit_NeoMatrix* matrix) {
  matrix->fillScreen(BLACK);
  uint8_t height = (matrixHeight-jump_height)/2;
  uint8_t width = (matrixWidth-jump_width)/2;
  for(uint8_t k = 0; k < GIF_Repetitions; k++){
    for(uint8_t j = 0; j < jump_frames; j++){
      for(uint8_t y = height; y < height+jump_height; y++){
        for(uint8_t x = width; x < width+jump_width; x++){
          uint16_t i = y*matrixWidth+x;
          uint8_t red =  pgm_read_dword(&(jump_animation[j][i][0]));
          uint8_t green = pgm_read_dword(&(jump_animation[j][i][1]));
          uint8_t blue = pgm_read_dword(&(jump_animation[j][i][2]));  
          matrix->drawPixel( x, y, matrix->Color(red,green,blue)); 
        }
      }
      delay(5);
      matrix->show();
      delay(75);
    }
  }
}

const uint8_t mario_width PROGMEM= 32;
const uint8_t mario_height PROGMEM= 32;
const uint8_t mario_frames PROGMEM= 2;
const uint16_t mario_colors PROGMEM= 24;

const uint16_t mario_colors_palette[LED_NUM][RGB_NUM] PROGMEM = {{252, 252, 252}, {22, 0, 0}, {156, 0, 0}, {228, 127, 5}, {73, 0, 0}, {146, 68, 0}, {0, 0, 0}, {252, 46, 19}, {252, 137, 37}, {56, 35, 3}, {252, 0, 6}, {0, 7, 70}, {6, 45, 252}, {51, 133, 239}, {15, 5, 3}, {228, 160, 45}, {154, 0, 0}, {255, 203, 4}, {255, 46, 19}, {31, 19, 2}, {0, 44, 146}, {38, 152, 241}, {0, 19, 115}, {228, 160, 44}};

const uint16_t mario_frame_sizes[MAX_ANIMATION_FRAMES_ACCEPTED] PROGMEM ={181, 185};

const uint16_t mario_animation[MAX_ANIMATION_FRAMES_ACCEPTED][LED_NUM][LED_DATA_SIZE] PROGMEM = {{{0, 0, 143}, {1, 143, 5}, {0, 148, 25}, {1, 173, 2}, {2, 175, 2}, {3, 177, 1}, {2, 178, 2}, {1, 180, 1}, {0, 181, 23}, {1, 204, 1}, {2, 205, 2}, {4, 207, 1}, {5, 208, 1}, {3, 209, 1}, {0, 210, 1}, {4, 211, 1}, {1, 212, 1}, {0, 213, 22}, {1, 235, 1}, {2, 236, 1}, {4, 237, 2}, {6, 239, 7}, {0, 246, 20}, {1, 266, 1}, {2, 267, 1}, {4, 268, 1}, {6, 269, 10}, {0, 279, 18}, {1, 297, 1}, {4, 298, 2}, {6, 300, 11}, {0, 311, 18}, {1, 329, 1}, {4, 330, 2}, {6, 332, 2}, {7, 334, 1}, {0, 335, 2}, {7, 337, 1}, {0, 338, 2}, {6, 340, 2}, {0, 342, 19}, {7, 361, 1}, {8, 362, 1}, {6, 363, 2}, {7, 365, 2}, {0, 367, 1}, {6, 368, 1}, {8, 369, 1}, {6, 370, 1}, {0, 371, 1}, {6, 372, 1}, {0, 373, 19}, {7, 392, 1}, {9, 393, 1}, {8, 394, 1}, {6, 395, 2}, {7, 397, 1}, {8, 398, 1}, {0, 399, 1}, {6, 400, 1}, {8, 401, 1}, {6, 402, 1}, {0, 403, 1}, {8, 404, 1}, {9, 405, 1}, {0, 406, 18}, {7, 424, 1}, {9, 425, 1}, {8, 426, 1}, {6, 427, 3}, {8, 430, 2}, {7, 432, 2}, {8, 434, 3}, {9, 437, 1}, {0, 438, 19}, {7, 457, 3}, {6, 460, 1}, {8, 461, 1}, {7, 462, 1}, {6, 463, 1}, {9, 464, 1}, {7, 465, 4}, {9, 469, 1}, {0, 470, 19}, {6, 489, 2}, {7, 491, 3}, {6, 494, 9}, {0, 503, 19}, {6, 522, 2}, {7, 524, 2}, {8, 526, 2}, {6, 528, 6}, {0, 534, 21}, {6, 555, 1}, {7, 556, 8}, {9, 564, 1}, {0, 565, 23}, {6, 588, 1}, {4, 589, 2}, {1, 591, 2}, {6, 593, 3}, {0, 596, 23}, {1, 619, 1}, {10, 620, 2}, {1, 622, 1}, {4, 623, 1}, {6, 624, 1}, {0, 625, 3}, {6, 628, 1}, {0, 629, 21}, {1, 650, 1}, {2, 651, 1}, {10, 652, 3}, {6, 655, 1}, {0, 656, 5}, {6, 661, 1}, {0, 662, 20}, {1, 682, 1}, {2, 683, 2}, {10, 685, 2}, {6, 687, 1}, {0, 688, 5}, {6, 693, 1}, {0, 694, 20}, {11, 714, 1}, {1, 715, 1}, {2, 716, 2}, {10, 718, 2}, {6, 720, 1}, {0, 721, 3}, {6, 724, 1}, {0, 725, 21}, {11, 746, 2}, {1, 748, 1}, {2, 749, 2}, {1, 751, 2}, {6, 753, 3}, {0, 756, 22}, {11, 778, 1}, {12, 779, 1}, {11, 780, 1}, {1, 781, 3}, {13, 784, 3}, {12, 787, 1}, {11, 788, 1}, {0, 789, 21}, {11, 810, 1}, {12, 811, 3}, {13, 814, 5}, {12, 819, 1}, {11, 820, 1}, {0, 821, 22}, {11, 843, 1}, {12, 844, 3}, {13, 847, 2}, {11, 849, 1}, {12, 850, 1}, {11, 851, 1}, {0, 852, 23}, {11, 875, 1}, {12, 876, 5}, {11, 881, 1}, {12, 882, 1}, {11, 883, 1}, {0, 884, 24}, {11, 908, 7}, {0, 915, 25}, {14, 940, 5}, {6, 945, 1}, {14, 946, 1}, {6, 947, 1}, {0, 948, 24}, {6, 972, 1}, {14, 973, 4}, {15, 977, 1}, {6, 978, 1}, {15, 979, 1}, {6, 980, 1}, {0, 981, 23}, {6, 1004, 9}, {0, 1013, 11}}, {{0, 147, 1}, {6, 169, 2}, {6, 172, 2}, {16, 175, 1}, {14, 176, 1}, {17, 177, 1}, {16, 178, 1}, {1, 179, 1}, {6, 201, 1}, {6, 203, 1}, {0, 204, 1}, {6, 205, 1}, {16, 206, 1}, {14, 207, 1}, {0, 208, 2}, {14, 210, 1}, {16, 211, 2}, {1, 213, 1}, {6, 234, 1}, {0, 235, 2}, {6, 237, 2}, {16, 244, 1}, {4, 245, 1}, {1, 246, 1}, {6, 265, 4}, {4, 277, 1}, {1, 278, 1}, {6, 296, 1}, {0, 297, 4}, {1, 310, 1}, {6, 328, 1}, {0, 329, 1}, {6, 330, 1}, {0, 331, 2}, {0, 334, 1}, {18, 336, 2}, {1, 342, 1}, {6, 360, 3}, {0, 364, 1}, {6, 365, 1}, {0, 366, 1}, {6, 367, 1}, {8, 368, 1}, {8, 372, 1}, {18, 373, 1}, {6, 374, 1}, {6, 392, 1}, {0, 393, 4}, {6, 397, 1}, {0, 398, 1}, {6, 399, 1}, {8, 400, 1}, {8, 405, 1}, {6, 406, 1}, {0, 424, 1}, {1, 425, 4}, {8, 429, 1}, {18, 430, 1}, {8, 432, 2}, {18, 435, 1}, {6, 437, 2}, {1, 457, 1}, {16, 458, 1}, {4, 459, 1}, {1, 460, 1}, {6, 461, 2}, {18, 463, 4}, {6, 467, 2}, {8, 469, 1}, {6, 470, 1}, {1, 489, 1}, {16, 490, 1}, {4, 491, 1}, {1, 492, 1}, {6, 493, 1}, {8, 501, 1}, {19, 502, 1}, {1, 521, 1}, {16, 522, 1}, {4, 523, 1}, {1, 524, 1}, {8, 525, 1}, {6, 526, 2}, {8, 532, 1}, {19, 533, 1}, {1, 553, 1}, {16, 554, 1}, {4, 555, 2}, {1, 557, 1}, {18, 558, 5}, {19, 563, 2}, {1, 586, 1}, {16, 587, 1}, {4, 588, 1}, {19, 589, 6}, {16, 595, 1}, {1, 596, 1}, {1, 618, 1}, {16, 619, 3}, {20, 622, 2}, {4, 624, 2}, {20, 626, 2}, {16, 628, 1}, {1, 629, 1}, {4, 651, 1}, {16, 652, 2}, {20, 654, 1}, {21, 655, 1}, {1, 656, 2}, {21, 658, 1}, {20, 659, 1}, {4, 660, 1}, {6, 662, 1}, {0, 682, 1}, {4, 683, 1}, {22, 684, 1}, {20, 685, 1}, {21, 686, 6}, {20, 692, 1}, {0, 693, 1}, {6, 695, 1}, {0, 714, 1}, {22, 715, 1}, {21, 716, 1}, {17, 717, 2}, {21, 719, 4}, {17, 723, 2}, {22, 725, 1}, {6, 727, 1}, {0, 746, 1}, {22, 747, 1}, {21, 748, 1}, {17, 749, 2}, {21, 751, 4}, {17, 755, 2}, {22, 757, 1}, {6, 759, 1}, {0, 778, 1}, {22, 779, 1}, {21, 780, 8}, {20, 788, 1}, {22, 789, 1}, {6, 790, 1}, {22, 810, 1}, {20, 811, 1}, {21, 812, 9}, {20, 821, 1}, {22, 822, 1}, {22, 842, 1}, {20, 843, 1}, {21, 844, 2}, {20, 846, 1}, {22, 847, 4}, {20, 851, 1}, {21, 852, 1}, {20, 853, 1}, {22, 854, 1}, {22, 874, 1}, {20, 875, 3}, {22, 878, 1}, {0, 879, 3}, {22, 882, 1}, {20, 883, 3}, {22, 886, 1}, {22, 906, 4}, {0, 910, 4}, {22, 914, 5}, {6, 937, 1}, {14, 938, 2}, {6, 941, 1}, {0, 942, 4}, {6, 946, 1}, {14, 947, 3}, {6, 950, 1}, {6, 968, 1}, {23, 969, 1}, {14, 970, 3}, {6, 973, 1}, {0, 974, 4}, {14, 979, 3}, {23, 982, 1}, {6, 983, 1}, {6, 1000, 4}, {0, 1006, 4}, {6, 1013, 3}}};

void showMario(Adafruit_NeoMatrix* matrix){
  matrix->fillScreen(BLACK);
  uint8_t height = (matrixHeight-mario_height)/2;
  uint8_t width = (matrixWidth-mario_width)/2;
  for(uint8_t k = 0; k < GIF_Repetitions; k++){
    for(uint8_t j = 0; j < mario_frames; j++){
      for(uint8_t y = height; y < height+mario_height; y++){
        for(uint8_t x = width; x < width+mario_width; x++){
          uint16_t i = y*matrixWidth+x;
          uint8_t red =  pgm_read_dword(&(mario_animation[j][i][0]));
          uint8_t green = pgm_read_dword(&(mario_animation[j][i][1]));
          uint8_t blue = pgm_read_dword(&(mario_animation[j][i][2]));  
          matrix->drawPixel( x, y, matrix->Color(red,green,blue)); 
        }
      }
      delay(5);
      matrix->show();
      delay(75);
    }
  }
}

const uint8_t pikachu_width PROGMEM= 32;
const uint8_t pikachu_height PROGMEM= 32;
const uint8_t pikachu_frames PROGMEM= 4;
const uint16_t pikachu_colors PROGMEM= 14;

const uint16_t pikachu_colors_palette[LED_NUM][RGB_NUM] PROGMEM = {{255, 255, 255}, {220, 156, 0}, {0, 1, 2}, {233, 198, 0}, {203, 102, 0}, {35, 13, 0}, {46, 25, 2}, {135, 41, 0}, {25, 5, 1}, {75, 25, 0}, {21, 6, 0}, {169, 0, 1}, {144, 8, 20}, {83, 3, 0}};

const uint16_t pikachu_frame_sizes[MAX_ANIMATION_FRAMES_ACCEPTED] PROGMEM = {153, 127, 117, 140};

const uint16_t pikachu_animation[MAX_ANIMATION_FRAMES_ACCEPTED][LED_NUM][LED_DATA_SIZE] PROGMEM = {{{0, 0, 2}, {1, 2, 1}, {2, 3, 1}, {0, 4, 30}, {3, 34, 3}, {4, 37, 1}, {2, 38, 1}, {0, 39, 27}, {3, 66, 6}, {4, 72, 1}, {2, 73, 1}, {0, 74, 24}, {3, 98, 7}, {2, 105, 1}, {0, 106, 26}, {2, 132, 2}, {4, 134, 1}, {3, 135, 1}, {2, 136, 1}, {0, 137, 29}, {2, 166, 1}, {3, 167, 1}, {2, 168, 1}, {0, 169, 29}, {2, 198, 1}, {3, 199, 1}, {1, 200, 1}, {2, 201, 1}, {0, 202, 28}, {2, 230, 1}, {1, 231, 1}, {3, 232, 2}, {0, 234, 8}, {2, 242, 1}, {0, 243, 21}, {2, 264, 1}, {5, 265, 1}, {0, 266, 6}, {2, 272, 2}, {6, 274, 1}, {2, 275, 1}, {7, 276, 1}, {2, 277, 1}, {0, 278, 18}, {2, 296, 1}, {8, 297, 1}, {5, 298, 1}, {2, 299, 1}, {0, 300, 2}, {2, 302, 1}, {5, 303, 1}, {7, 304, 1}, {2, 305, 1}, {1, 306, 2}, {6, 308, 1}, {7, 309, 1}, {2, 310, 1}, {0, 311, 19}, {2, 330, 1}, {8, 331, 1}, {2, 332, 1}, {4, 333, 1}, {3, 334, 1}, {5, 335, 1}, {3, 336, 1}, {1, 337, 1}, {2, 338, 1}, {4, 339, 1}, {3, 340, 2}, {9, 342, 1}, {1, 343, 1}, {4, 344, 1}, {2, 345, 1}, {0, 346, 18}, {10, 364, 1}, {3, 365, 2}, {5, 367, 1}, {3, 368, 2}, {5, 370, 1}, {4, 371, 1}, {6, 372, 1}, {3, 373, 5}, {4, 378, 1}, {0, 379, 17}, {3, 396, 8}, {1, 404, 1}, {7, 405, 1}, {3, 406, 5}, {2, 411, 1}, {0, 412, 16}, {3, 428, 16}, {0, 444, 16}, {3, 460, 14}, {0, 474, 1}, {1, 475, 1}, {0, 476, 16}, {4, 492, 1}, {3, 493, 3}, {4, 496, 1}, {6, 497, 1}, {3, 498, 5}, {4, 503, 1}, {11, 504, 1}, {4, 505, 1}, {12, 506, 1}, {1, 507, 1}, {2, 508, 1}, {0, 509, 15}, {4, 524, 2}, {3, 526, 4}, {6, 530, 1}, {3, 531, 4}, {13, 535, 2}, {11, 537, 1}, {3, 538, 1}, {4, 539, 1}, {2, 540, 1}, {0, 541, 16}, {7, 557, 1}, {4, 558, 1}, {3, 559, 2}, {1, 561, 1}, {6, 562, 1}, {3, 563, 7}, {1, 570, 1}, {7, 571, 1}, {0, 572, 18}, {4, 590, 5}, {5, 595, 1}, {3, 596, 1}, {1, 597, 1}, {4, 598, 4}, {2, 602, 1}, {0, 603, 20}, {2, 623, 1}, {0, 624, 2}, {4, 626, 2}, {3, 628, 1}, {6, 629, 1}, {2, 630, 1}, {0, 631, 27}, {4, 658, 1}, {3, 659, 1}, {4, 660, 1}, {7, 661, 1}, {0, 662, 28}, {7, 690, 1}, {1, 691, 1}, {7, 692, 1}, {0, 693, 29}, {6, 722, 2}, {2, 724, 1}, {0, 725, 11}}, {{0, 2, 2}, {0, 34, 5}, {2, 64, 1}, {0, 66, 8}, {4, 96, 1}, {3, 97, 1}, {2, 98, 2}, {0, 100, 6}, {3, 128, 5}, {1, 133, 1}, {2, 134, 1}, {0, 135, 2}, {3, 160, 6}, {0, 167, 2}, {2, 192, 3}, {4, 195, 1}, {3, 196, 2}, {0, 199, 3}, {2, 210, 3}, {3, 229, 1}, {0, 231, 3}, {0, 242, 1}, {2, 243, 1}, {7, 244, 2}, {2, 246, 1}, {3, 261, 1}, {2, 262, 2}, {0, 264, 2}, {0, 272, 1}, {2, 274, 1}, {3, 275, 3}, {6, 278, 2}, {2, 280, 2}, {4, 293, 1}, {3, 294, 2}, {0, 296, 4}, {0, 302, 5}, {6, 307, 1}, {3, 308, 6}, {1, 314, 1}, {2, 315, 1}, {5, 327, 1}, {0, 330, 4}, {2, 334, 2}, {8, 336, 2}, {4, 338, 1}, {4, 340, 1}, {7, 341, 1}, {3, 342, 6}, {8, 359, 1}, {5, 360, 1}, {8, 361, 1}, {0, 364, 1}, {2, 365, 1}, {5, 366, 1}, {3, 367, 1}, {5, 368, 2}, {3, 370, 3}, {3, 378, 1}, {2, 379, 2}, {5, 393, 1}, {2, 396, 1}, {5, 397, 2}, {1, 400, 1}, {5, 401, 1}, {3, 404, 2}, {2, 412, 1}, {2, 425, 2}, {10, 427, 1}, {5, 430, 1}, {13, 440, 1}, {11, 441, 1}, {1, 444, 1}, {2, 445, 1}, {3, 459, 1}, {13, 472, 2}, {3, 474, 2}, {1, 476, 1}, {2, 477, 1}, {3, 491, 2}, {3, 496, 2}, {3, 503, 4}, {3, 523, 3}, {3, 530, 1}, {4, 535, 4}, {2, 539, 1}, {0, 540, 1}, {2, 555, 1}, {3, 556, 3}, {3, 561, 1}, {1, 562, 1}, {4, 563, 1}, {7, 564, 1}, {1, 565, 1}, {4, 567, 1}, {7, 568, 1}, {2, 569, 1}, {0, 570, 2}, {3, 588, 5}, {2, 595, 2}, {7, 597, 1}, {3, 598, 2}, {7, 600, 1}, {2, 601, 1}, {0, 602, 1}, {2, 620, 1}, {4, 621, 1}, {3, 622, 3}, {2, 625, 1}, {0, 626, 4}, {4, 630, 1}, {3, 631, 1}, {2, 632, 1}, {2, 653, 1}, {1, 654, 1}, {3, 655, 1}, {4, 656, 1}, {2, 657, 1}, {0, 658, 4}, {2, 662, 1}, {4, 663, 1}, {6, 686, 1}, {1, 687, 1}, {6, 688, 1}, {0, 690, 3}, {2, 719, 3}, {0, 722, 3}}, {{4, 64, 1}, {2, 65, 1}, {3, 96, 1}, {3, 98, 1}, {4, 99, 1}, {2, 100, 1}, {3, 133, 1}, {4, 134, 1}, {4, 166, 1}, {2, 178, 5}, {2, 195, 2}, {2, 209, 1}, {3, 212, 2}, {4, 214, 1}, {6, 215, 1}, {9, 216, 1}, {2, 217, 1}, {2, 231, 2}, {4, 244, 2}, {3, 246, 2}, {4, 248, 1}, {6, 249, 1}, {4, 250, 1}, {2, 251, 1}, {2, 260, 1}, {1, 261, 1}, {3, 262, 2}, {0, 273, 5}, {4, 279, 1}, {3, 280, 5}, {2, 285, 1}, {0, 293, 2}, {1, 295, 1}, {2, 307, 1}, {7, 308, 1}, {4, 309, 1}, {3, 314, 3}, {1, 317, 1}, {2, 326, 1}, {5, 328, 2}, {2, 333, 1}, {4, 334, 1}, {3, 335, 2}, {5, 337, 2}, {3, 339, 3}, {3, 349, 1}, {2, 358, 3}, {5, 361, 1}, {2, 364, 1}, {5, 365, 1}, {4, 366, 1}, {3, 368, 1}, {9, 369, 1}, {5, 370, 1}, {3, 379, 1}, {3, 381, 1}, {2, 382, 1}, {2, 394, 2}, {1, 396, 1}, {3, 400, 2}, {5, 402, 1}, {13, 410, 1}, {11, 411, 1}, {3, 412, 2}, {4, 414, 1}, {0, 425, 1}, {3, 427, 1}, {1, 429, 1}, {3, 440, 2}, {13, 442, 2}, {3, 444, 2}, {2, 446, 1}, {3, 458, 1}, {6, 472, 1}, {4, 473, 5}, {3, 490, 1}, {4, 506, 1}, {6, 507, 2}, {9, 509, 1}, {3, 522, 1}, {1, 533, 1}, {4, 534, 1}, {3, 536, 4}, {6, 540, 1}, {9, 541, 1}, {3, 554, 2}, {4, 560, 3}, {2, 565, 1}, {0, 566, 2}, {2, 568, 1}, {7, 569, 1}, {4, 570, 2}, {7, 572, 1}, {2, 573, 1}, {3, 586, 2}, {4, 590, 3}, {2, 594, 1}, {0, 595, 7}, {2, 616, 1}, {6, 617, 1}, {3, 618, 3}, {1, 621, 1}, {2, 622, 1}, {0, 623, 3}, {0, 630, 3}, {8, 648, 1}, {3, 649, 1}, {2, 650, 1}, {4, 651, 1}, {2, 652, 1}, {0, 653, 5}, {0, 662, 2}, {6, 680, 1}, {2, 681, 1}, {0, 686, 3}, {8, 712, 1}, {0, 719, 3}}, {{4, 1, 1}, {2, 2, 1}, {4, 33, 1}, {3, 34, 2}, {4, 36, 1}, {2, 37, 1}, {0, 64, 1}, {3, 66, 6}, {2, 72, 1}, {0, 96, 1}, {2, 97, 1}, {3, 99, 5}, {4, 104, 1}, {0, 128, 2}, {3, 134, 2}, {2, 136, 1}, {0, 160, 7}, {3, 167, 1}, {2, 168, 3}, {0, 178, 5}, {0, 192, 6}, {3, 199, 1}, {2, 200, 1}, {3, 201, 1}, {0, 209, 9}, {0, 229, 4}, {5, 233, 1}, {2, 234, 2}, {2, 242, 1}, {0, 244, 8}, {0, 260, 4}, {2, 265, 1}, {2, 267, 1}, {2, 270, 1}, {5, 271, 1}, {2, 272, 4}, {6, 276, 1}, {7, 277, 1}, {2, 278, 1}, {0, 279, 7}, {0, 295, 1}, {2, 298, 1}, {5, 299, 1}, {10, 300, 1}, {1, 301, 1}, {3, 302, 1}, {5, 303, 1}, {3, 304, 1}, {1, 305, 1}, {2, 306, 1}, {3, 308, 1}, {7, 310, 1}, {9, 311, 1}, {0, 312, 6}, {0, 326, 4}, {2, 331, 1}, {3, 332, 3}, {5, 335, 1}, {3, 337, 1}, {2, 339, 1}, {4, 340, 1}, {1, 341, 1}, {4, 343, 2}, {1, 345, 1}, {2, 346, 1}, {0, 347, 1}, {0, 349, 1}, {0, 358, 4}, {3, 363, 4}, {5, 367, 1}, {3, 369, 1}, {5, 371, 1}, {6, 372, 1}, {4, 373, 1}, {4, 379, 1}, {0, 380, 3}, {0, 393, 1}, {3, 395, 4}, {4, 403, 1}, {4, 405, 1}, {7, 406, 1}, {3, 410, 2}, {0, 412, 3}, {3, 426, 1}, {3, 429, 2}, {3, 442, 1}, {2, 443, 2}, {0, 445, 2}, {3, 472, 3}, {2, 475, 2}, {0, 477, 1}, {13, 504, 1}, {11, 505, 1}, {3, 506, 2}, {4, 508, 1}, {2, 509, 1}, {1, 527, 1}, {4, 528, 1}, {3, 533, 3}, {13, 536, 2}, {3, 540, 1}, {2, 541, 1}, {2, 553, 1}, {6, 554, 1}, {4, 555, 2}, {7, 557, 1}, {2, 558, 3}, {7, 561, 1}, {3, 563, 9}, {2, 572, 1}, {0, 573, 1}, {2, 585, 2}, {0, 587, 7}, {6, 595, 1}, {3, 596, 2}, {6, 598, 1}, {4, 599, 4}, {2, 603, 1}, {0, 616, 7}, {4, 628, 1}, {3, 629, 1}, {1, 630, 1}, {9, 631, 1}, {2, 632, 1}, {0, 648, 5}, {2, 660, 1}, {4, 661, 1}, {3, 662, 1}, {6, 663, 1}, {9, 664, 1}, {0, 680, 2}, {2, 693, 1}, {1, 694, 1}, {6, 695, 1}, {7, 696, 1}, {2, 697, 1}, {0, 712, 1}, {4, 726, 1}, {7, 727, 1}, {6, 728, 2}}};

void showPikachu(Adafruit_NeoMatrix* matrix){
  matrix->fillScreen(BLACK);
  uint8_t height = (matrixHeight-pikachu_height)/2;
  uint8_t width = (matrixWidth-pikachu_width)/2;
  for(uint8_t k = 0; k < GIF_Repetitions; k++){
    for(uint8_t j = 0; j < pikachu_frames; j++){
      for(uint8_t y = height; y < height+pikachu_height; y++){
        for(uint8_t x = width; x < width+pikachu_width; x++){
          uint16_t i = y*matrixWidth+x;
          uint8_t red =  pgm_read_dword(&(pikachu_animation[j][i][0]));
          uint8_t green = pgm_read_dword(&(pikachu_animation[j][i][1]));
          uint8_t blue = pgm_read_dword(&(pikachu_animation[j][i][2]));  
          matrix->drawPixel( x, y, matrix->Color(red,green,blue)); 
        }
      }
      delay(5);
      matrix->show();
      delay(75);
    }
  }
}


const uint8_t pokeball_width PROGMEM= 32;
const uint8_t pokeball_height PROGMEM= 32;
const uint8_t pokeball_frames PROGMEM= 1;
const uint16_t pokeball_colors PROGMEM= 4;

const uint16_t pokeball_colors_palette[LED_NUM][RGB_NUM] PROGMEM= {{0, 0, 0}, {189, 4, 3}, {255, 255, 255}, {67, 67, 67}};

const uint16_t pokeball_frame_sizes[MAX_ANIMATION_FRAMES_ACCEPTED] PROGMEM= {93};
const uint16_t pokeball_animation[MAX_ANIMATION_FRAMES_ACCEPTED][LED_NUM][LED_DATA_SIZE] PROGMEM = {{{0, 0, 140}, {1, 140, 8}, {0, 148, 24}, {1, 172, 8}, {0, 180, 20}, {1, 200, 16}, {0, 216, 16}, {1, 232, 16}, {0, 248, 14}, {1, 262, 4}, {2, 266, 2}, {1, 268, 12}, {0, 280, 14}, {1, 294, 4}, {2, 298, 2}, {1, 300, 12}, {0, 312, 14}, {1, 326, 2}, {2, 328, 2}, {1, 330, 16}, {0, 346, 12}, {1, 358, 2}, {2, 360, 2}, {1, 362, 16}, {0, 378, 10}, {1, 388, 24}, {0, 412, 8}, {1, 420, 24}, {0, 444, 12}, {1, 456, 8}, {0, 464, 6}, {1, 470, 6}, {0, 476, 12}, {1, 488, 8}, {0, 496, 6}, {1, 502, 6}, {0, 508, 14}, {1, 522, 4}, {0, 526, 2}, {2, 528, 6}, {0, 534, 2}, {1, 536, 4}, {0, 540, 14}, {1, 554, 4}, {0, 558, 2}, {2, 560, 6}, {0, 566, 2}, {1, 568, 4}, {0, 572, 8}, {3, 580, 2}, {2, 582, 4}, {0, 586, 6}, {2, 592, 6}, {0, 598, 14}, {3, 612, 2}, {2, 614, 4}, {0, 618, 6}, {2, 624, 6}, {0, 630, 16}, {2, 646, 6}, {0, 652, 4}, {2, 656, 6}, {0, 662, 2}, {2, 664, 2}, {0, 666, 12}, {2, 678, 6}, {0, 684, 4}, {2, 688, 6}, {0, 694, 2}, {2, 696, 2}, {0, 698, 12}, {3, 710, 2}, {2, 712, 8}, {0, 720, 6}, {2, 726, 4}, {0, 730, 12}, {3, 742, 2}, {2, 744, 8}, {0, 752, 6}, {2, 758, 4}, {0, 762, 14}, {3, 776, 2}, {2, 778, 14}, {0, 792, 16}, {3, 808, 2}, {2, 810, 14}, {0, 824, 20}, {3, 844, 4}, {2, 848, 4}, {0, 852, 24}, {3, 876, 4}, {2, 880, 4}, {0, 884, 140}}};

void showPokeBall(Adafruit_NeoMatrix* matrix){
  matrix->fillScreen(BLACK);
  uint8_t height = (matrixHeight-pokeball_height)/2;
  uint8_t width = (matrixWidth-pokeball_width)/2;
  for(uint8_t k = 0; k < GIF_Repetitions; k++){
    for(uint8_t j = 0; j < pokeball_frames; j++){
      for(uint8_t y = height; y < height+pokeball_height; y++){
        for(uint8_t x = width; x < width+pokeball_width; x++){
          uint16_t i = y*matrixWidth+x;
          uint8_t red =  pgm_read_dword(&(pokeball_animation[j][i][0]));
          uint8_t green = pgm_read_dword(&(pokeball_animation[j][i][1]));
          uint8_t blue = pgm_read_dword(&(pokeball_animation[j][i][2]));  
          matrix->drawPixel( x, y, matrix->Color(red,green,blue)); 
        }
      }
      delay(5);
      matrix->show();
      delay(75);
    }
  }
}


const uint8_t flower_width PROGMEM= 32;
const uint8_t flower_height PROGMEM= 32;
const uint8_t flower_frames PROGMEM= 1;
const uint16_t flower_colors PROGMEM= 6;

const uint16_t flower_colors_palette[LED_NUM][RGB_NUM] PROGMEM= {{0, 0, 0}, {255, 0, 0}, {255, 34, 0}, {255, 210, 0}, {255, 255, 255}, {1, 142, 0}};

const uint16_t flower_frame_sizes[MAX_ANIMATION_FRAMES_ACCEPTED] PROGMEM= {143};
const uint16_t flower_animation[MAX_ANIMATION_FRAMES_ACCEPTED][LED_NUM][LED_DATA_SIZE] PROGMEM = {{{0, 0, 72}, {1, 72, 16}, {0, 88, 16}, {1, 104, 16}, {0, 120, 12}, {1, 132, 6}, {2, 138, 14}, {1, 152, 4}, {0, 156, 8}, {1, 164, 6}, {2, 170, 14}, {1, 184, 4}, {0, 188, 6}, {1, 194, 4}, {2, 198, 4}, {3, 202, 2}, {0, 204, 2}, {3, 206, 4}, {0, 210, 2}, {3, 212, 2}, {2, 214, 4}, {1, 218, 4}, {0, 222, 4}, {1, 226, 4}, {2, 230, 4}, {3, 234, 2}, {0, 236, 2}, {3, 238, 4}, {0, 242, 2}, {3, 244, 2}, {2, 246, 4}, {1, 250, 4}, {0, 254, 4}, {1, 258, 4}, {2, 262, 2}, {3, 264, 2}, {4, 266, 2}, {0, 268, 2}, {4, 270, 4}, {0, 274, 2}, {4, 276, 4}, {2, 280, 2}, {1, 282, 4}, {0, 286, 4}, {1, 290, 4}, {2, 294, 2}, {3, 296, 2}, {4, 298, 2}, {0, 300, 2}, {4, 302, 4}, {0, 306, 2}, {4, 308, 4}, {2, 312, 2}, {1, 314, 4}, {0, 318, 4}, {1, 322, 4}, {2, 326, 4}, {3, 330, 2}, {0, 332, 2}, {3, 334, 4}, {0, 338, 2}, {3, 340, 2}, {2, 342, 4}, {1, 346, 4}, {0, 350, 4}, {1, 354, 4}, {2, 358, 4}, {3, 362, 2}, {0, 364, 2}, {3, 366, 4}, {0, 370, 2}, {3, 372, 2}, {2, 374, 4}, {1, 378, 4}, {0, 382, 6}, {1, 388, 6}, {2, 394, 12}, {1, 406, 6}, {0, 412, 8}, {1, 420, 6}, {2, 426, 12}, {1, 438, 6}, {0, 444, 12}, {1, 456, 16}, {0, 472, 16}, {1, 488, 16}, {0, 504, 86}, {5, 590, 4}, {0, 594, 28}, {5, 622, 4}, {0, 626, 16}, {5, 642, 4}, {0, 646, 8}, {5, 654, 4}, {0, 658, 8}, {5, 666, 4}, {0, 670, 4}, {5, 674, 4}, {0, 678, 8}, {5, 686, 4}, {0, 690, 8}, {5, 698, 4}, {0, 702, 4}, {5, 706, 6}, {0, 712, 6}, {5, 718, 4}, {0, 722, 6}, {5, 728, 6}, {0, 734, 4}, {5, 738, 6}, {0, 744, 6}, {5, 750, 4}, {0, 754, 6}, {5, 760, 6}, {0, 766, 4}, {5, 770, 10}, {0, 780, 2}, {5, 782, 4}, {0, 786, 2}, {5, 788, 10}, {0, 798, 4}, {5, 802, 10}, {0, 812, 2}, {5, 814, 4}, {0, 818, 2}, {5, 820, 10}, {0, 830, 6}, {5, 836, 8}, {0, 844, 2}, {5, 846, 4}, {0, 850, 2}, {5, 852, 8}, {0, 860, 8}, {5, 868, 8}, {0, 876, 2}, {5, 878, 4}, {0, 882, 2}, {5, 884, 8}, {0, 892, 12}, {5, 904, 16}, {0, 920, 16}, {5, 936, 16}, {0, 952, 72}}};

void showFlower(Adafruit_NeoMatrix* matrix){
  matrix->fillScreen(BLACK);
  uint8_t height = (matrixHeight-flower_height)/2;
  uint8_t width = (matrixWidth-flower_width)/2;
  for(uint8_t k = 0; k < GIF_Repetitions; k++){
    for(uint8_t j = 0; j < flower_frames; j++){
      for(uint8_t y = height; y < height+flower_height; y++){
        for(uint8_t x = width; x < width+flower_width; x++){
          uint16_t i = y*matrixWidth+x;
          uint8_t red =  pgm_read_dword(&(flower_animation[j][i][0]));
          uint8_t green = pgm_read_dword(&(flower_animation[j][i][1]));
          uint8_t blue = pgm_read_dword(&(flower_animation[j][i][2]));  
          matrix->drawPixel( x, y, matrix->Color(red,green,blue)); 
        }
      }
      delay(5);
      matrix->show();
      delay(75);
    }
  }
}

const uint8_t fish_width PROGMEM= 32;
const uint8_t fish_height PROGMEM= 32;
const uint8_t fish_frames PROGMEM= 1;
const uint16_t fish_colors PROGMEM= 14;

const uint16_t fish_colors_palette[LED_NUM][RGB_NUM] PROGMEM= {{0, 0, 0}, {0, 29, 101}, {8, 96, 255}, {78, 164, 255}, {255, 255, 255}, {36, 133, 255}, {0, 4, 17}, {3, 64, 208}, {105, 13, 0}, {252, 171, 0}, {255, 89, 8}, {43, 3, 0}, {152, 34, 0}, {14, 0, 0}};

const uint16_t fish_frame_sizes[MAX_ANIMATION_FRAMES_ACCEPTED] PROGMEM= {281};
const uint16_t fish_animation[MAX_ANIMATION_FRAMES_ACCEPTED][LED_NUM][LED_DATA_SIZE] PROGMEM = {{{0, 0, 2}, {1, 2, 28}, {0, 30, 4}, {1, 34, 28}, {0, 62, 4}, {1, 66, 2}, {2, 68, 2}, {3, 70, 2}, {4, 72, 6}, {3, 78, 10}, {5, 88, 2}, {2, 90, 2}, {1, 92, 2}, {0, 94, 4}, {1, 98, 2}, {2, 100, 2}, {3, 102, 2}, {4, 104, 6}, {3, 110, 10}, {5, 120, 2}, {2, 122, 2}, {1, 124, 2}, {0, 126, 6}, {6, 132, 2}, {2, 134, 2}, {7, 136, 16}, {2, 152, 2}, {6, 154, 2}, {0, 156, 8}, {6, 164, 2}, {2, 166, 2}, {7, 168, 16}, {2, 184, 2}, {6, 186, 2}, {0, 188, 6}, {1, 194, 2}, {3, 196, 2}, {4, 198, 4}, {7, 202, 10}, {2, 212, 2}, {7, 214, 2}, {2, 216, 2}, {3, 218, 2}, {1, 220, 2}, {0, 222, 4}, {1, 226, 2}, {3, 228, 2}, {4, 230, 4}, {7, 234, 10}, {2, 244, 2}, {7, 246, 2}, {2, 248, 2}, {3, 250, 2}, {1, 252, 2}, {0, 254, 2}, {1, 256, 2}, {5, 258, 2}, {2, 260, 2}, {4, 262, 4}, {7, 266, 2}, {8, 268, 6}, {7, 274, 8}, {2, 282, 2}, {5, 284, 2}, {1, 286, 4}, {5, 290, 2}, {2, 292, 2}, {4, 294, 4}, {7, 298, 2}, {8, 300, 6}, {7, 306, 8}, {2, 314, 2}, {5, 316, 2}, {1, 318, 4}, {5, 322, 2}, {2, 324, 4}, {8, 328, 4}, {9, 332, 2}, {10, 334, 2}, {9, 336, 2}, {8, 338, 2}, {7, 340, 6}, {2, 346, 2}, {5, 348, 2}, {1, 350, 4}, {5, 354, 2}, {2, 356, 4}, {8, 360, 4}, {9, 364, 2}, {10, 366, 2}, {9, 368, 2}, {8, 370, 2}, {7, 372, 6}, {2, 378, 2}, {5, 380, 2}, {1, 382, 4}, {3, 386, 2}, {7, 388, 2}, {8, 390, 2}, {10, 392, 2}, {9, 394, 2}, {10, 396, 2}, {9, 398, 6}, {8, 404, 2}, {7, 406, 2}, {8, 408, 2}, {1, 410, 2}, {3, 412, 2}, {1, 414, 4}, {3, 418, 2}, {7, 420, 2}, {8, 422, 2}, {10, 424, 2}, {9, 426, 2}, {10, 428, 2}, {9, 430, 6}, {8, 436, 2}, {7, 438, 2}, {8, 440, 2}, {1, 442, 2}, {3, 444, 2}, {1, 446, 4}, {3, 450, 2}, {8, 452, 2}, {10, 454, 2}, {9, 456, 2}, {4, 458, 2}, {9, 460, 2}, {4, 462, 4}, {9, 466, 4}, {8, 470, 2}, {9, 472, 2}, {11, 474, 2}, {3, 476, 2}, {1, 478, 4}, {3, 482, 2}, {8, 484, 2}, {10, 486, 2}, {9, 488, 2}, {4, 490, 2}, {9, 492, 2}, {4, 494, 4}, {9, 498, 4}, {8, 502, 2}, {9, 504, 2}, {11, 506, 2}, {3, 508, 2}, {1, 510, 4}, {3, 514, 2}, {11, 516, 2}, {9, 518, 2}, {0, 520, 2}, {4, 522, 2}, {10, 524, 2}, {4, 526, 8}, {10, 534, 2}, {12, 536, 2}, {11, 538, 2}, {3, 540, 2}, {1, 542, 4}, {3, 546, 2}, {11, 548, 2}, {9, 550, 2}, {0, 552, 2}, {4, 554, 2}, {10, 556, 2}, {4, 558, 8}, {10, 566, 2}, {12, 568, 2}, {11, 570, 2}, {3, 572, 2}, {1, 574, 4}, {3, 578, 2}, {11, 580, 2}, {10, 582, 2}, {9, 584, 4}, {10, 588, 2}, {9, 590, 6}, {10, 596, 2}, {11, 598, 2}, {10, 600, 2}, {11, 602, 2}, {3, 604, 2}, {1, 606, 4}, {3, 610, 2}, {11, 612, 2}, {10, 614, 2}, {9, 616, 4}, {10, 620, 2}, {9, 622, 6}, {10, 628, 2}, {11, 630, 2}, {10, 632, 2}, {11, 634, 2}, {3, 636, 2}, {1, 638, 4}, {3, 642, 2}, {7, 644, 2}, {11, 646, 2}, {10, 648, 12}, {13, 660, 2}, {7, 662, 2}, {11, 664, 2}, {1, 666, 2}, {3, 668, 2}, {1, 670, 4}, {3, 674, 2}, {7, 676, 2}, {11, 678, 2}, {10, 680, 12}, {13, 692, 2}, {7, 694, 2}, {11, 696, 2}, {1, 698, 2}, {3, 700, 2}, {1, 702, 4}, {3, 706, 2}, {7, 708, 4}, {11, 712, 4}, {12, 716, 2}, {9, 718, 2}, {12, 720, 2}, {13, 722, 2}, {7, 724, 8}, {3, 732, 2}, {1, 734, 4}, {3, 738, 2}, {7, 740, 4}, {11, 744, 4}, {12, 748, 2}, {9, 750, 2}, {12, 752, 2}, {13, 754, 2}, {7, 756, 8}, {3, 764, 2}, {1, 766, 4}, {5, 770, 2}, {1, 772, 2}, {7, 774, 4}, {1, 778, 2}, {13, 780, 6}, {1, 786, 2}, {7, 788, 6}, {1, 794, 2}, {5, 796, 2}, {1, 798, 4}, {5, 802, 2}, {1, 804, 2}, {7, 806, 4}, {1, 810, 2}, {13, 812, 6}, {1, 818, 2}, {7, 820, 6}, {1, 826, 2}, {5, 828, 2}, {1, 830, 2}, {0, 832, 2}, {1, 834, 2}, {5, 836, 2}, {1, 838, 20}, {5, 858, 2}, {1, 860, 2}, {0, 862, 4}, {1, 866, 2}, {5, 868, 2}, {1, 870, 20}, {5, 890, 2}, {1, 892, 2}, {0, 894, 6}, {1, 900, 2}, {2, 902, 20}, {1, 922, 2}, {0, 924, 8}, {1, 932, 2}, {2, 934, 20}, {1, 954, 2}, {0, 956, 10}, {6, 966, 20}, {0, 986, 12}, {6, 998, 20}, {0, 1018, 6}}};

void showFish(Adafruit_NeoMatrix* matrix){
  matrix->fillScreen(BLACK);
  uint8_t height = (matrixHeight-fish_height)/2;
  uint8_t width = (matrixWidth-fish_width)/2;
  for(uint8_t k = 0; k < GIF_Repetitions; k++){
    for(uint8_t j = 0; j < fish_frames; j++){
      for(uint8_t y = height; y < height+fish_height; y++){
        for(uint8_t x = width; x < width+fish_width; x++){
          uint16_t i = y*matrixWidth+x;
          uint8_t red =  pgm_read_dword(&(fish_animation[j][i][0]));
          uint8_t green = pgm_read_dword(&(fish_animation[j][i][1]));
          uint8_t blue = pgm_read_dword(&(fish_animation[j][i][2]));  
          matrix->drawPixel( x, y, matrix->Color(red,green,blue)); 
        }
      }
      delay(5);
      matrix->show();
      delay(75);
    }
  }
}

typedef struct {
  uint8_t width;
  uint8_t height;
  uint8_t frames;
  uint16_t colors;
  uint8_t colors_palette[LED_NUM][RGB_NUM];
  uint16_t frame_sizes[MAX_ANIMATION_FRAMES_ACCEPTED];
  uint16_t animation[MAX_ANIMATION_FRAMES_ACCEPTED][LED_NUM][LED_DATA_SIZE];
}Config;

Config config;

void loadConfigurationFromFlashMem(uint8_t index) {
  // uint32_t delay_val;
  // uint8_t width;
  // uint8_t height;
  // uint8_t frames;
  // uint16_t colors;
  // const uint16_t (*colors_palette)[LED_NUM][RGB_NUM];
  // const uint16_t (*frame_sizes)[MAX_ANIMATION_FRAMES_ACCEPTED];
  // const uint16_t (*animation)[MAX_ANIMATION_FRAMES_ACCEPTED][LED_NUM][LED_DATA_SIZE];
  switch (index) {
    case 0:
      showJump(&matrix);
      break;
    case 1:
      showPikachu(&matrix);
      break;
    case 2:
      showMario(&matrix);
      break;
    case 3:
      showPokeBall(&matrix);
      break;
    case 4:
      showFlower(&matrix);
      break;
    case 5:
      showFish(&matrix);
      break;
  }
}

void loadConfiguration(fs::FS &sd,const char *filename, Config &config) {
  File file = sd.open(filename);

  //simpler because we dont need to specify doc size but still not the most stable, but fastest.
  JsonDocument doc;
  ReadBufferingStream bufferedFile(file, 64);
  DeserializationError error = deserializeJson(doc, bufferedFile);

  if (error)
    Serial.println(F("Failed to read file, using default configuration"));

  config.width = doc["width"];
  config.height = doc["height"];
  config.frames = doc["frames"];
  config.colors = doc["colors"];
  
  for(uint16_t j = 0; j < config.colors; j++){
    JsonArray curr_color = doc["colors_palette"][j];
    config.colors_palette[j][0] = curr_color[0];
    config.colors_palette[j][1] = curr_color[1];
    config.colors_palette[j][2] = curr_color[2];
  }

  
  for(uint16_t j = 0; j < config.frames; j++){
    config.frame_sizes[j] = doc["frame_sizes"][j];
    JsonArray curr_frame = doc["animation"][j];
      for(uint16_t i = 0; i < config.frame_sizes[j]; i++){
        JsonArray curr_led = curr_frame[i];
        int starting_index = curr_led[1];
        int length = curr_led[2];
        int stoping_index = starting_index + length;
        for(uint16_t k = starting_index ; k < stoping_index; k++){
          int curr=curr_led[0];
          config.animation[j][k][0] = config.colors_palette[curr][0];
          config.animation[j][k][1] = config.colors_palette[curr][1]; 
          config.animation[j][k][2] = config.colors_palette[curr][2];
        }
      }
  }

  file.close();
}

void displayFromFlash(){
    uint8_t index =0;
    while(index<7){
    loadConfigurationFromFlashMem(index);
    index++;
    matrix.fillScreen(BLACK);
  }
}



#endif
