#LED Matrix

This innovative LED Matrix project, developed by Zenab Asi, Osama Sayah, and Kareem Ismail, presents a dynamic platform for a multitude of applications including displaying text, images, GIFs, and real-time clock functionality.
It's a fusion of hardware and software expertise that results in captivating visual experiences.

## Features
- displaying a menu which enables the user to chose between entring sd mode or wifi mode via navigating button and confirmation button.
- in sd card mode the user can chose between displaying gifs or images from the sd card with the option to navigate through the dirctories via the navigation button.
- when chosing sd option there is error handling mechanisim that displays the error on the matrix for instance if there is no sd card or no specifed dirictory or file.
- in the case of chosing wifi mode Connect to Wi-Fi networks for Internet access.
- Interact with Firebase RTDB for data synchronization.
- display messages which are sent from the app to the matrix.
- control the matrix display brightness via the app.
- displaying time using Network Time Protocol (NTP).
- Store data locally on an SD card (optional).
- Upload GIFs from the app, which are sent and saved to the SD card.
- Control the LED matrix display via the app or using physical buttons.

## Hardware Requirements

- Arduino development board (e.g., Arduino Uno, ESP32).
- LED matrix display.
- Pushbuttons or tactile switches for user input.
- SD card module (optional).
- Jumper wires and breadboard for connections.
- Power supply for the Arduino board and LED matrix.

## Software Requirements

- Arduino IDE (Integrated Development Environment).
- Necessary libraries for Wi-Fi connectivity, Firebase integration, LED matrix control, button handling, and SD card interfacing.

## Setup

### Hardware Setup

1. Connect the LED matrix display to the Arduino board following the wiring diagram.
2. Wire the pushbuttons or tactile switches to the Arduino for user input.
3. If using an SD card module, connect it to the Arduino board.
4. Ensure all connections are secure and correctly made.

### Software Setup

1. Install the Arduino IDE on your computer if not already installed.
2. Clone or download this repository to your local machine.
3. Open the Arduino sketch file (.ino) in the Arduino IDE.
4. Install the required libraries using the Arduino Library Manager.
5. Configure Wi-Fi credentials and Firebase API key in the `config.h` file.
6. Adjust any other configuration parameters as needed.
7. Upload the sketch to your Arduino board.

## Usage

1. Power on the Arduino board and LED matrix display.
2. The device will initialize and attempt to connect to the configured Wi-Fi network.
3. Once connected, it will sign in to Firebase and begin syncing data with the RTDB.
4. Use the pushbuttons or tactile switches to interact with the device and navigate through different modes and functionalities.
5. Alternatively, control the LED matrix display via the app by uploading GIFs and sending commands to the device.

## Error Handling

### `app.h`

- **Wi-Fi Connection**: If the device fails to connect to Wi-Fi, it will display an error message on the LED matrix and retry connecting and on the app.
- **Firebase Connection**: If the device fails to sign in to Firebase or encounters errors while syncing data, it will display an error message and attempt to reconnect.
- **SD Card Detection**: If no SD card is detected, the device will display a notification on the LED matrix and fall back to displaying images from flash memory.
- **Library Errors**: If any required library is missing or encounters errors, the device will display an error message on the LED matrix and halt further execution.

### `buttons.h`

- **Button Handling**: Error handling for button inputs, ensuring that button presses are properly detected and processed.

### `matrix.h`

- **LED Matrix Control**: Error handling for controlling the LED matrix display, including error messages for communication failures or display malfunctions.

### `menu.h`

- **Mode Navigation**: Different modes in the project, including descriptions of each mode and how to navigate between them using button inputs or app commands.

### `sd_card.h`

- **SD Card Interfacing**: Error handling for SD card detection and file operations, including fallback mechanisms if the SD card is not present or encounters errors.

## Contributing

Contributions to this project are welcome! If you find any issues or have suggestions for improvements, please open an issue or submit a pull request.

## License

This project is licensed under the MIT License. See the `LICENSE` file for details.

## libraries used :



_____________________________________________________________________________________________________________________________
