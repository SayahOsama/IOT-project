#LED Matrix

This innovative LED Matrix project, developed by Zenab Asi, Osama Sayah, and Kareem Ismail, presents a dynamic platform for a multitude of applications including displaying text, images, GIFs, and real-time clock functionality.
It's a fusion of hardware and software expertise that results in captivating visual experiences.

Overview
The LED Matrix project offers a comprehensive platform for dynamic content display and user interaction, combining hardware and software elements to create engaging visual experiences. Developed by Zenab Asi, Osama Sayah, and Kareem Ismail, this project leverages Arduino technology to control an LED matrix display, providing a wide range of functionalities for both standalone and connected operations.

Key Features
Menu Navigation: Users can navigate through a menu system to choose between SD card mode and time & date mode, enabling flexible content display options.

SD Card Mode: In SD card mode, users can select between displaying GIFs or images stored on the SD card, with built-in error handling mechanisms to handle potential issues such as missing SD card or invalid directories/files.

Wi-Fi Connectivity: The project supports Wi-Fi connectivity for Internet access, allowing users to interact with Firebase RTDB for data synchronization, message display, and remote control capabilities.

App Integration: Users can interact with the LED matrix display via a companion mobile app, enabling features such as message display, brightness control, and GIF uploads for dynamic content creation.

Real-time Clock: The project synchronizes time using Network Time Protocol (NTP), enabling accurate time and date display on the LED matrix.

Local Data Storage: An optional feature allows users to store data locally on an SD card, providing additional storage capacity for GIFs, images, and other content.

Error Handling: Robust error handling mechanisms ensure smooth operation and user feedback in case of connectivity issues, SD card detection errors, or other potential issues.

Physical Button Control: Physical buttons are integrated into the system, providing an alternative method for controlling the LED matrix display without relying on the app.

Project Structure
The LED Matrix project consists of three main folders:

LED Matrix Arduino Sketch (led_matrix): This folder contains the Arduino sketch files responsible for controlling the LED matrix display and coordinating various functionalities such as menu navigation, content display, and error handling.

App Development (app): The app folder houses the codebase for the companion mobile app, allowing users to interact with the LED matrix display remotely. The app facilitates features such as message sending, brightness adjustment, and GIF uploads.

Python Server (python_server): Within the python_server folder, you'll find the code for a Python server responsible for converting GIFs to JSON format. This server-side component enhances the project's functionality by enabling seamless integration of GIFs into the LED matrix display.

## Error Handling

### `app.h`

- **Wi-Fi Connection**: If the device fails to connect to Wi-Fi, it will display an error message on the LED matrix and retry connecting and on the app.
- **Firebase Connection**: If the device fails to sign in to Firebase or encounters errors while syncing data, it will display an error message and attempt to reconnect.
- **SD Card Detection**: If no SD card is detected, the device will display a notification on the LED matrix and fall back to displaying images from flash memory.
- **Library Errors**: If any required library is missing or encounters errors, the device will display an error message on the LED matrix and halt further execution.

### `buttonstested.h`

- **Button Handling**: Error handling for button inputs, ensuring that button presses are properly detected and processed.

### `matrix.h`

- **LED Matrix Control**: Error handling for controlling the LED matrix display, including error messages for communication failures or display malfunctions.

### `menu.h`

- **Mode Navigation**: Different modes in the project, including descriptions of each mode and how to navigate between them using button inputs or app commands.

### `sd_card.h`

- **SD Card Interfacing**: Error handling for SD card detection and file operations, including fallback mechanisms if the SD card is not present or encounters errors.

_____________________________________________________________________________________________________________________________
